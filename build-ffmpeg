#!/bin/bash

# https://github.com/markus-perl/ffmpeg-build-script

VERSION=1.0
CWD=$(pwd)
PACKAGES="$CWD/packages"
WORKSPACE="$CWD/workspace"
CC=clang
LDFLAGS="-L${WORKSPACE}/lib -lm"
CFLAGS="-I${WORKSPACE}/include"
PKG_CONFIG_PATH="${WORKSPACE}/lib/pkgconfig"

CUDA_LIB="/usr/local/cuda-9.1/targets/x86_64-linux/lib"
echo "/usr/local/cuda-9.1/targets/x86_64-linux/lib" > /etc/ld.so.conf.d/cuda.conf

echo "ldconfig..."
ldconfig -v | grep -A 20 -B 20 npp

ln -s $CUDA_LIB/libnppc_static.a /lib64/liblibnppc.a
ln -s $CUDA_LIB/libnppidei_static.a /lib64/libnppidei.a
ln -s $CUDA_LIB/lib64/libnppial_static.a /lib64/libnppia.a
ln -s $CUDA_LIB/lib64/libnppicc_static.a /lib64/libnppicc.a


echo "WORKSPACE: ${WORKSPACE}"

# Speed up the process
# Env Var NUMJOBS overrides automatic detection
if [[ -n $NUMJOBS ]]; then
    MJOBS=$NUMJOBS
elif [[ -f /proc/cpuinfo ]]; then
    MJOBS=$(grep -c processor /proc/cpuinfo)
elif [[ "$OSTYPE" == "darwin"* ]]; then
	MJOBS=$(sysctl -n machdep.cpu.thread_count)
else
    MJOBS=4
fi

make_dir () {
	if [ ! -d $1 ]; then
		if ! mkdir $1; then
			printf "\n Failed to create dir %s" "$1";
			exit 1
		fi
	fi
}

remove_dir () {
	if [ -d $1 ]; then
		rm -r "$1"
	fi
}

download () {
	if [ ! -f "$PACKAGES/$2" ]; then

		echo "Downloading $1"
		curl -L --silent -o "$PACKAGES/$2" "$1"

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE. Retrying in 10 seconds";
			sleep 10
			curl -L --silent -o "$PACKAGES/$2" "$1"
		fi

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE";
			exit 1
		fi

		echo "... Done"

		if ! tar -xvf "$PACKAGES/$2" -C "$PACKAGES" 2>/dev/null >/dev/null; then
			echo "Failed to extract $2";
			exit 1
		fi

	fi
}

execute () {
	echo "$ $*"

	OUTPUT=$($@ 2>&1)

	if [ $? -ne 0 ]; then
        echo "$OUTPUT"
        echo ""
        echo "Failed to Execute $*" >&2
        exit 1
    fi
}

build () {
	echo ""
	echo "building $1"
	echo "======================="

	if [ -f "$PACKAGES/$1.done" ]; then
		echo "$1 already built. Remove $PACKAGES/$1.done lockfile to rebuild it."
		return 1
	fi

	return 0
}

command_exists() {
    if ! [[ -x $(command -v "$1") ]]; then
        return 1
    fi

    return 0
}


build_done () {
	touch "$PACKAGES/$1.done"
}

echo "ffmpeg-build-script v$VERSION"
echo "========================="
echo ""

case "$1" in
"--cleanup")
	remove_dir $PACKAGES
	remove_dir $WORKSPACE
	echo "Cleanup done."
	echo ""
	exit 0
    ;;
"--build")

    ;;
*)
    echo "Usage: $0"
    echo "   --build: start building process"
    echo "   --cleanup: remove all working dirs"
    echo "   --help: show this help"
    echo ""
    exit 0
    ;;
esac

echo "Using $MJOBS make jobs simultaneously."

make_dir $PACKAGES
make_dir $WORKSPACE

export PATH=${WORKSPACE}/bin:$PATH

if ! command_exists "make"; then
    echo "make not installed.";
    exit 1
fi

if ! command_exists "g++"; then
    echo "g++ not installed.";
    exit 1
fi

if ! command_exists "curl"; then
    echo "curl not installed.";
    exit 1
fi

build "ffmpeg"
download "http://ffmpeg.org/releases/ffmpeg-4.1.tar.bz2" "ffmpeg-snapshot.tar.bz2"
cd $PACKAGES/ffmpeg-4.1 || exit

echo "Copy pkconfig from cuda nv headers"
cp -v /usr/local/lib/pkgconfig/* $WORKSPACE/lib/pkgconfig/
cat /usr/local/lib/pkgconfig/ffnvcodec.pc

echo "/usr/local/cuda/include:"
ls -lah /usr/local/cuda/include/*

echo "/usr/local/cuda/lib64:"
ls -lah /usr/local/cuda/lib64/*

echo "libnpp"
ld -llibnpp --verbose

echo "libnppc"
ld -llibnppc --verbose

./configure \
    --pkgconfigdir="$WORKSPACE/lib/pkgconfig" \
    --prefix=${WORKSPACE} \
    --pkg-config-flags="--static" \
    --extra-cflags="-I$WORKSPACE/include" \
    --extra-ldflags="-L$WORKSPACE/lib" \
    --extra-libs="-lpthread -lm" \
	--enable-static \
	--disable-debug \
	--disable-shared \
	--disable-ffplay \
	--disable-doc \
	--enable-gpl \
	--enable-version3 \
	--enable-nonfree \
	--enable-pthreads \
	--enable-libvpx \
	--enable-libmp3lame \
	--enable-libtheora \
	--enable-libvorbis \
	--enable-libx264 \
	--enable-libx265 \
	--enable-runtime-cpudetect \
	--enable-libfdk-aac \
	--enable-avfilter \
	--enable-libopencore_amrwb \
	--enable-libopencore_amrnb \
	--enable-filters \
	--enable-libvidstab \
	--enable-nonfree --disable-shared \
	--enable-nvenc --enable-cuda \
	--enable-cuvid --enable-libnpp \
	--extra-cflags=-I/usr/local/cuda/include \
	--extra-cflags=-I/usr/local/include \
	--extra-cflags=-L/usr/local/cuda/lib64 \
	--extra-cflags=-L/usr/local/cuda/lib64/libnppc_static.a \
	--extra-cflags=-L/usr/local/cuda/lib64/libnppidei_static.a \
	--extra-cflags=-L/usr/local/cuda/lib64/libnppial_static.a \
	--extra-ldflags=-L/usr/local/cuda/lib64 \
	--extra-ldflags=-L/usr/local/cuda/lib64/libnppc_static.a \
	--extra-ldflags=-L/usr/local/cuda/lib64/libnppidei_static.a \
	--extra-ldflags=-L/usr/local/cuda/lib64/libnppial_static.a
#	--extra-ldflags=-lnppial_static -lnppc_static \
#	--extra-ldflags=-lnppial_static
#	--extra-ldflags=-static \
#	--extra-ldflags=-static-libgcc \
#	--extra-ldflags=-static-libstdc++
	
	# libnppc_static.a
	# libnppidei_static.a
	# libnppial_static.a
	
	
	# enable all filters
	# enable AAC de/encoding via libfdk-aac [no]
	# enable detecting cpu capabilities at runtime (smaller binary)
	# enable HEVC encoding via x265 [no]
	# enable H.264 encoding via x264 [no]
	# enable Vorbis en/decoding via libvorbis, native implementation exists [no]
	# enable Theora encoding via libtheora [no]
	# enable MP3 encoding via libmp3lame [no]
	# enable VP8 and VP9 de/encoding via libvpx [no]
	# enable pthreads [autodetect]
	# allow use of nonfree code, the resulting libs and binaries will be unredistributable [no]
	# upgrade (L)GPL to version 3 [no]
	# allow use of GPL code, the resulting libs and binaries will be under GPL [no]
	# do not build documentation
	# disable ffserver build
	# disable ffplay build
	# build static libraries [no]
	# disable debugging symbols
	# disable build shared libraries [no]
execute make -j $MJOBS
execute make install

INSTALL_FOLDER="/usr/bin"
if [[ "$OSTYPE" == "darwin"* ]]; then
INSTALL_FOLDER="/usr/local/bin"
fi

echo ""
echo "Building done. The binary can be found here: $WORKSPACE/bin/ffmpeg"
echo ""

ls -la "$WORKSPACE/bin"

if [[ $AUTOINSTALL == "yes" ]]; then
	if command_exists "sudo"; then
		sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
		sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
		echo "Done. ffmpeg is now installed to your system"
	fi
elif [[ ! $SKIPINSTALL == "yes" ]]; then
	if command_exists "sudo"; then

		read -r -p "Install the binary to your $INSTALL_FOLDER folder? [Y/n] " response

		case $response in
    		[yY][eE][sS]|[yY])
        		sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
        		sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
        		echo "Done. ffmpeg is now installed to your system"
        		;;
		esac
	fi
fi

exit 0
